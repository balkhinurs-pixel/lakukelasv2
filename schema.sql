-- Users Table: Stores authentication info from Supabase Auth.
create table users (
  id uuid not null primary key,
  full_name text,
  avatar_url text,
  -- Foreign key to Supabase Auth's users table.
  constraint fk_users_id foreign key(id) references auth.users(id) on delete cascade
);

-- Profiles Table: Stores additional user-specific data.
create table profiles (
  id uuid not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  nip text,
  pangkat text,
  jabatan text,
  -- Foreign key to our public users table
  constraint fk_profiles_id foreign key(id) references users(id) on delete cascade
);


-- School Data Table: Stores school-specific information.
create table school_data (
  id bigint generated by default as identity primary key,
  user_id uuid not null references users(id) on delete cascade,
  school_name text,
  school_address text,
  headmaster_name text,
  headmaster_nip text,
  school_logo_url text,
  unique(user_id) -- Ensures each user has only one school data entry
);

-- Classes Table: Stores class information.
create table classes (
  id uuid not null default gen_random_uuid() primary key,
  name text not null,
  teacher_id uuid not null references users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Subjects Table: Stores subject information.
create table subjects (
  id uuid not null default gen_random_uuid() primary key,
  name text not null,
  kkm integer not null default 75,
  teacher_id uuid not null references users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Students Table: Stores student information.
create table students (
  id uuid not null default gen_random_uuid() primary key,
  name text not null,
  nis text,
  nisn text,
  gender text,
  class_id uuid not null references classes(id) on delete cascade,
  teacher_id uuid not null references users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Schedule Table: Stores weekly teaching schedule.
create table schedule (
  id uuid not null default gen_random_uuid() primary key,
  day text not null,
  start_time time not null,
  end_time time not null,
  subject_id uuid not null references subjects(id) on delete cascade,
  class_id uuid not null references classes(id) on delete cascade,
  teacher_id uuid not null references users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Attendance Table: Stores attendance records for each meeting.
create table attendance (
  id uuid not null default gen_random_uuid() primary key,
  date date not null,
  meeting_number integer,
  subject_id uuid not null references subjects(id) on delete cascade,
  class_id uuid not null references classes(id) on delete cascade,
  teacher_id uuid not null references users(id) on delete cascade,
  records jsonb not null, -- Stores [{ "student_id": "uuid", "status": "Hadir" }, ...]
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Grades Table: Stores grade records for each assessment.
create table grades (
  id uuid not null default gen_random_uuid() primary key,
  date date not null,
  assessment_type text not null,
  subject_id uuid not null references subjects(id) on delete cascade,
  class_id uuid not null references classes(id) on delete cascade,
  teacher_id uuid not null references users(id) on delete cascade,
  records jsonb not null, -- Stores [{ "student_id": "uuid", "score": 95 }, ...]
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Journals Table: Stores teaching journal entries.
create table journals (
  id uuid not null default gen_random_uuid() primary key,
  date date not null,
  meeting_number integer,
  learning_objectives text,
  learning_activities text,
  assessment text,
  reflection text,
  subject_id uuid not null references subjects(id) on delete cascade,
  class_id uuid not null references classes(id) on delete cascade,
  teacher_id uuid not null references users(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);


-- Function to handle new user inserts from Auth.
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.users (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up.
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Enable Row Level Security (RLS) for all tables.
alter table profiles enable row level security;
alter table school_data enable row level security;
alter table classes enable row level security;
alter table subjects enable row level security;
alter table students enable row level security;
alter table schedule enable row level security;
alter table attendance enable row level security;
alter table grades enable row level security;
alter table journals enable row level security;

-- Policies for Profiles
create policy "Public profiles are viewable by everyone."
  on profiles for select using (true);
create policy "Users can insert their own profile."
  on profiles for insert with check (auth.uid() = id);
create policy "Users can update their own profile."
  on profiles for update using (auth.uid() = id);

-- Policies for School Data
create policy "Users can manage their own school data."
  on school_data for all using (auth.uid() = user_id);

-- Policies for all teacher-specific data
create policy "Users can manage their own classes."
  on classes for all using (auth.uid() = teacher_id);
create policy "Users can manage their own subjects."
  on subjects for all using (auth.uid() = teacher_id);
create policy "Users can manage their own students."
  on students for all using (auth.uid() = teacher_id);
create policy "Users can manage their own schedule."
  on schedule for all using (auth.uid() = teacher_id);
create policy "Users can manage their own attendance."
  on attendance for all using (auth.uid() = teacher_id);
create policy "Users can manage their own grades."
  on grades for all using (auth.uid() = teacher_id);
create policy "Users can manage their own journals."
  on journals for all using (auth.uid() = teacher_id);
