-- Ekstensi untuk UUID
create extension if not exists "uuid-ossp" with schema "extensions";

-- 1. Tabel Pengguna (Guru)
-- Tabel ini menyimpan informasi dasar tentang pengguna aplikasi (guru).
-- Menggunakan sistem autentikasi bawaan Supabase.
create table if not exists public.profiles (
  id uuid not null primary key, -- Terhubung ke auth.users.id
  full_name text,
  avatar_url text,
  email text,
  -- Tambahkan kolom profil lain yang relevan di sini
  -- seperti NIP, pangkat, jabatan, dll.
  nip text,
  pangkat_golongan text,
  jabatan text
);

alter table public.profiles enable row level security;
create policy "Public profiles are viewable by everyone." on public.profiles for select using (true);
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);
create policy "Users can update own profile." on public.profiles for update using (auth.uid() = id);


-- 2. Tabel Langganan
-- Menyimpan status langganan setiap pengguna.
create table if not exists public.subscriptions (
  id uuid not null primary key, -- Terhubung ke profiles.id
  status text check (status in ('free', 'premium')) not null default 'free',
  plan_name text check (plan_name in ('Free', 'Semester', 'Tahunan')) not null default 'Free',
  expires_at timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  
  constraint fk_profiles foreign key(id) references public.profiles(id) on delete cascade
);

alter table public.subscriptions enable row level security;
create policy "Users can view their own subscription." on public.subscriptions for select using (auth.uid() = id);
-- Hanya admin yang boleh mengubah langganan (melalui backend/edge function)
-- Jadi, tidak ada policy untuk insert/update/delete dari sisi klien.


-- 3. Tabel Kupon
-- Menyimpan data kupon diskon yang dibuat oleh admin.
create table if not exists public.coupons (
  id bigint generated by default as identity primary key,
  code text not null unique,
  type text check (type in ('Persen', 'Tetap')) not null,
  value numeric not null,
  usage_limit int not null,
  times_used int not null default 0,
  is_active boolean not null default true,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.coupons enable row level security;
create policy "Public can view active coupons." on public.coupons for select using (is_active = true);
-- Hanya admin yang boleh membuat/mengubah kupon.


-- 4. Tabel Data Sekolah
-- Menyimpan data sekolah yang terkait dengan pengguna.
create table if not exists public.school_data (
  id uuid not null primary key, -- Terhubung ke profiles.id (satu data sekolah per guru)
  school_name text,
  school_address text,
  school_logo_url text,
  headmaster_name text,
  headmaster_nip text,
  
  constraint fk_profiles foreign key(id) references public.profiles(id) on delete cascade
);

alter table public.school_data enable row level security;
create policy "Users can manage their own school data." on public.school_data for all using (auth.uid() = id);


-- 5. Tabel Tahun Ajaran
create table if not exists public.school_years (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  name text not null, -- e.g., "2024/2025 - Semester Ganjil"
  is_active boolean not null default false,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade
);
alter table public.school_years enable row level security;
create policy "Users can manage their own school years." on public.school_years for all using (auth.uid() = user_id);


-- 6. Tabel Kelas
create table if not exists public.classes (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  name text not null,
  school_year_id bigint not null,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_school_years foreign key(school_year_id) references public.school_years(id) on delete cascade
);
alter table public.classes enable row level security;
create policy "Users can manage their own classes." on public.classes for all using (auth.uid() = user_id);

-- 7. Tabel Siswa
create table if not exists public.students (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  class_id bigint not null,
  name text not null,
  nis text,
  nisn text,
  gender text check (gender in ('Laki-laki', 'Perempuan')),
  is_active boolean not null default true, -- Untuk menandai siswa lulus/pindah
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_classes foreign key(class_id) references public.classes(id) on delete cascade
);
alter table public.students enable row level security;
create policy "Users can manage their own students." on public.students for all using (auth.uid() = user_id);


-- 8. Tabel Jadwal Pelajaran
create table if not exists public.schedule_items (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  class_id bigint not null,
  day text not null,
  start_time time not null,
  end_time time not null,
  subject text not null,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_classes foreign key(class_id) references public.classes(id) on delete cascade
);
alter table public.schedule_items enable row level security;
create policy "Users can manage their own schedule." on public.schedule_items for all using (auth.uid() = user_id);


-- 9. Tabel Jurnal Mengajar
create table if not exists public.journal_entries (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  class_id bigint not null,
  entry_date date not null,
  subject text not null,
  meeting_number int,
  material text,
  learning_objectives text not null,
  learning_activities text not null,
  assessment text,
  reflection text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_classes foreign key(class_id) references public.classes(id) on delete cascade
);
alter table public.journal_entries enable row level security;
create policy "Users can manage their own journal entries." on public.journal_entries for all using (auth.uid() = user_id);


-- 10. Tabel Presensi
create table if not exists public.attendance_records (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  student_id bigint not null,
  class_id bigint not null,
  entry_date date not null,
  meeting_number int,
  status text check (status in ('Hadir', 'Sakit', 'Izin', 'Alpha')) not null,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_students foreign key(student_id) references public.students(id) on delete cascade,
  constraint fk_classes foreign key(class_id) references public.classes(id) on delete cascade,
  unique (student_id, entry_date, meeting_number) -- Siswa hanya bisa punya 1 status presensi per pertemuan
);
alter table public.attendance_records enable row level security;
create policy "Users can manage attendance for their students." on public.attendance_records for all using (auth.uid() = user_id);


-- 11. Tabel Penilaian
create table if not exists public.grade_records (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  student_id bigint not null,
  class_id bigint not null,
  assessment_type text not null, -- e.g., "Ulangan Harian 1", "Tugas", "UTS"
  entry_date date not null,
  score numeric not null,
  
  constraint fk_profiles foreign key(user_id) references public.profiles(id) on delete cascade,
  constraint fk_students foreign key(student_id) references public.students(id) on delete cascade,
  constraint fk_classes foreign key(class_id) references public.classes(id) on delete cascade
);
alter table public.grade_records enable row level security;
create policy "Users can manage grades for their students." on public.grade_records for all using (auth.uid() = user_id);
